# Create an RStudio SErver on Digital Ocean 

Author: Grant Allard  
Contact: grant@grantallard.com  

## Purpose 
These instructions will guide you to set up an RStudio server on DigitalOcean. Running data science code on a cloud platform allows you to run processes that require more resources than are available on your local computer or processes that will require more time than your local computer. The advantage of using RStudio is that it provides an Integrated Development Environment (IDE) that is identical to the desktop version of RStudio, which minimizes the amount of time you will spend learning to work in a new environment. I use RStudio over other IDEs because it provides a good user interface for finding/interacting with files, viewing outputs, writing scripts, using both *R* and terminal consoles. 

By the end of these instructions, you will have a fully configured ready-to-run RStudio server on which you can set up multiple users and on which you can use the modern workspace and file hosting service **Dropbox**. 

## Prerequisites 
(1) Set up a digital ocean droplet that has at least 2GB of RAM.

Configure this droplet. See the instructions from Digital Ocean on [the initial server setup with Ubuntu 18.04 ](https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-18-04). 

(2) You should also have a passing familiarty with [*Nginx*](https://kinsta.com/knowledgebase/what-is-nginx/#:~:text=Nginx%2C%20pronounced%20like%20%E2%80%9Cengine%2D,HTTP%20cache%2C%20and%20load%20balancer.&text=Nginx%20was%20originally%20created%20by,public%20release%20in%20October%202004.) (pronounced *engine-x**) or [Apache](https://kinsta.com/knowledgebase/what-is-apache/). I will use Nginx in this tutorial because (1) I am more familiar with it than Apache and (2) it is far more versatile. 

## General Approach 
I approach this processs working from Minimum Viable Product (MVP) to a more finished product. The MVP is a *RStudio* server that we can access via the IP Address. The more-finished- ersion uses Nginx as a reverse proxy server and a custom URL. 

## Set Up *R*
The first step in this process is to install R, RStudio, and Shiny.  I am basing these processes on the steps outlined by [RStudio](https://web.archive.org/web/20200425074931/https://rstudio.com/products/rstudio/download-server/debian-ubuntu/). 

[R Package Source](https://cran.rstudio.com/bin/linux/ubuntu/README.html)


Installation instructions for Ubuntu18.04: 
```zsh
#Download key

```


```zsh
#Get most recet LongTermRelease from CRAN
sudo add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran40/'
```

```zsh
#Update packages
sudo apt-get Update
```

```zsh
sudo apt install r-base
```


Now I install Rstudio
```zsh
sudo apt-get install gdebi-core
```

```zsh
wget https://download2.rstudio.org/server/bionic/amd64/rstudio-server-1.3.959-amd64.deb

sudo gdebi rstudio-server-1.3.959-amd64.deb
```

Now I need to install some dependencies on Ubuntu for RStudio. 

```zsh
sudo apt-get install libxml2-dev libssl-dev libcurl4-openssl-dev libgsl0-dev libudunits2-dev libgdal-dev libproj-dev
```

The next step is to change our firewall settings and then to visit the IP address of the server. 

```zsh
#Change Firewall settings
sudo ufw allow from <local computer ip address>. 
```

In your browser, type `<droplet IP address>:8787`. You should be greeted by an RStudio login screen.  **Log in** to RStudio using your non-root user credentials. In the future, to add users to RStudio, you will need to use Ubuntu's admin processes. 

## Configure RStudio
To configure RStudio, I log in and will install R packages through the Rstudion console. 

The RStudio packages I install are: 

* devtools 
* Tidyverse - Grammar for datascience
* Tidy models - wrapper package for data science
* Quanteda - textual analysis
* tm - text mining
* topicmodels - textual analysis
* modelR - modeling basics for tidyverse
* quantmod - financial modeling
* doParallel - parallelization
* foreach - parallelization
* tidycensus - Census and geographic data
* gtools - programming tools
* RPostgres - DBI database client
* lavaan - SEM modeling
* lmer - multi-level models
* plm - panel linear models
* naniar - missing data visualization
* mapsapi - google maps API
* stargazer - publication-ready tables
* kableExtra - another good table package
* plotly - 3-d modeling
* urbanmapr - good tools for making attractive maps
* RSelenium - web scraping 
* Patentsview - USPTO api
* pdftools - read and extract info from PDFs. 
* mapr - wrapper for geospatial data. 

Next, I configure R for use with my dropbox account. There are several approaches fro accomplishing this task. The most popular approach is to use the `rdrop2` package. I do not use this approach because it will not allow me to see my dropbox directory in my Rstudio 'Files' Folder. Instead, I install the Dropbox Client. 

```zsh
#Download Dropbox to home directory of non-root user
cd ~ && wget -O - "https://www.dropbox.com/download?plat=lnx.x86_64" | tar xzf -
```

```zsh
#Run Dropbox Daemon in ~/.dropbox-dist/dropboxd
~/.dropbox-dist/dropboxd
```

Dropbox will ask you to visit a link at which you will connect your account to the device. 

```
Please visit https://www.dropbox.com/cli_link_nonce?nonce=link to link this device.
````

## Use custom domain with RStudio. 

1) Point domain to DigitalOcean's name servers.

2) Make correct A records for pointing domain to droplet IP address. Be sure to set Time To Life (TTL) to 60 seconds. 

3) Check that traffic is pointing by typing in yourdomainname:8787.

Now I want to use Nginx to help me reverse proxy the domain name so we can connect over https and 

### Install Certbot
Before I get started, I need to install Certbot. 

```zsh
sudo add-apt-repository ppa:certbot/certbot
```
```zsh
#Update packages 
sudo apt-get update

#Install certbot 
sudo apt-get install certbot
```

```zsh
#Adjust the firewall to open port 80, which certbot needs
sudo ufw allow 80
```

```zsh
sudo certbot certonly --standalone --preferred-challenges http -d datatechdemo.com
``

```zsh
#Location of ssl key
cd /etc/cd letsencrypt/live/
```

Update certbot for auto-renew
```
sudo nano /etc/letsencrypt/renewal/datatechdemo.com.conf
```
Add the following to the last line of `datatechdemo.com.conf`:


```zsh
renew_hook = systemctl reload rabbitmq
```

Then test the certbot in a dry run and see if it works.

```zsh
sudo certbot renew --dry-run
```


### Install Nginx - Need to figure out code here. 

Now I need to ssh into the droplet. I install nginx using the following command: 

```zsh
sudo apt install nginx
```

Then I need to add Nginx connections to my firewall. My goal is to create a secure TLS/SSL connection, so I will use the following commands. 

```zsh
sudo ufw allow 'Nginx HTTP'
sudo ufw allow 'Nginx HTTPS'
```

Next,  I check the status of the Nginx system install. 

```zsh
systemctl status nginx
```
It should retrun something as follows. It needs to say "active (running)."
```
● nginx.service - A high performance web server and a reverse proxy server
   Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: en
   Active: active (running) since Wed 2020-07-01 15:41:28 UTC; 4min 9s ago
     Docs: man:nginx(8)
 Main PID: 25052 (nginx)
    Tasks: 2 (limit: 2362)
   CGroup: /system.slice/nginx.service
           ├─25052 nginx: master process /usr/sbin/nginx -g daemon on; master_pr
           └─25055 nginx: worker process
```

Next I edit the `nginx.conf` file.

```zsh
sudo nano /etc/nginx/nginx.conf
```

I insert the following settings in the `http` block. 

```
http {
    ...
    # Map proxy settings for RStudio
        map $http_upgrade $connection_upgrade {
            default upgrade;
            '' close;
        }
}
```

Next I adjust the sites-available script. 

```
sudo nano /etc/nginx/sites-available/datactechdemo.com
```
Add the following into the blank file:

```
server {
   listen 80 default_server;
   listen [::]:80 default_server ipv6only=on;
   server_name datatechdemo.com www.datatechdemo.com ;
   return 301 https://$server_name$request_uri;
}
server {
   listen 443 ssl;
   server_name datatechdemo.com www.datatechdemo.com;
   ssl_certificate /etc/letsencrypt/live/datatechdemo.com/fullchain.pem;
   ssl_certificate_key /etc/letsencrypt/live/datatechdemo.com/privkey.pem;
   ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
   ssl_prefer_server_ciphers on;
   ssl_ciphers AES256+EECDH:AES256+EDH:!aNULL;

   location / {
       proxy_pass http://your_server_ip:3838;
       proxy_redirect http://your_server_ip:3838/ https://$host/;
       proxy_http_version 1.1;
       proxy_set_header Upgrade $http_upgrade;
       proxy_set_header Connection $connection_upgrade;
       proxy_read_timeout 20d;
   }
}
```

Next, I create a sym link to the sites-enabled directory. 

```
sudo ln -s /etc/nginx/sites-available/datatechdemo.com  /etc/nginx/sites-enabled/datatechdemo.com 
```

Now I need to disable the default sites-enabled script. 

```
sudo rm -f /etc/nginx/sites-enabled/default
```

